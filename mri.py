# -*- coding: utf-8 -*-
"""MRI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GAac3rpU8qRDEwbZwN_hpdU8pDHQLpKX

## Connect Google Colab to Google drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Install different packages"""

!pip install pydicom

pip install dicom2nifti

"""## Import"""

import os
import pandas as pd
import json
import gzip
import shutil
import dicom2nifti
import glob

"""# DICOM TO NIFTI Transformation

We have built this setup based on PycadÂ´s script on how to convert DCM to NII.
https://pycad.co/how-to-convert-a-dicom-series-into-one-nifti-file-python/

The changes from Pycad to this script is (Metadata) and decompression of nii.gz files into normal nii files for further analysis.
"""

dicom_base_path = '/content/drive/MyDrive/MASTER THESIS/Code and modelling/Database/!THESIS! - DICOM (ADNI 3 & 4)/MCI'
nifti_base_path = '/content/drive/MyDrive/MASTER THESIS/Code and modelling/Database/!THESIS! - MRI (before "recon-all")/MCI'
metadata_path = '/content/drive/MyDrive/MASTER THESIS/Code and modelling/Database/!THESIS! - DICOM (ADNI 3 & 4)/XLSX MCI/REPLACEMENT MRI MCI1.xlsx'  # Excel File, with Path as PK

# Read the metadata from the Xlsx file.
try:
    metadata_df = pd.read_excel(metadata_path)
    print("Metadata loaded successfully.")
except Exception as e:
    print(f"Error reading the Excel file: {e}")

def convert_and_save_metadata(subject_id, dicom_full_path, nifti_base_path, metadata_df):
    patient_nifti_path = os.path.join(nifti_base_path, subject_id)

    os.makedirs(patient_nifti_path, exist_ok=True)
    if os.path.isdir(dicom_full_path):
        dicom2nifti.convert_directory(dicom_full_path, patient_nifti_path)
        print(f"Conversion done for {subject_id}. Checking for NIfTI.gz files.")

        # After conversion, we look for .nii.gz files
        nifti_gz_files = glob.glob(os.path.join(patient_nifti_path, '*.nii.gz'))
        if nifti_gz_files:
            # If there are multiple .nii.gz files, this will decompress each one (Should just be one)
            for nifti_gz_file in nifti_gz_files:
                nifti_gz_file_path = os.path.join(patient_nifti_path, nifti_gz_file)
                nifti_file_path = os.path.join(patient_nifti_path, subject_id + '.nii')

                with gzip.open(nifti_gz_file_path, 'rb') as f_in:
                    with open(nifti_file_path, 'wb') as f_out:
                        shutil.copyfileobj(f_in, f_out)
                os.remove(nifti_gz_file_path)  # Remove the compressed .nii.gz file

                print(f"NIfTI file for {subject_id} decompressed to {nifti_file_path}")
        else:
            print(f"No NIfTI.gz files found for {subject_id} in {patient_nifti_path}")
    else:
        print(f"Dicom directory does not exist for {subject_id}")

    # Save the metadata
    metadata_filename = f"{subject_id}.json"
    metadata_filepath = os.path.join(patient_nifti_path, metadata_filename)
    patient_metadata = metadata_df.loc[metadata_df['Subject_ID'] == subject_id].to_dict('records')[0]

    # Writing the metadata to JSON
    with open(metadata_filepath, 'w') as json_file:
        json.dump(patient_metadata, json_file, indent=4)

    print(f"Metadata file saved for {subject_id} as {metadata_filename}")

# Process each entry in the metadata DataFrame
for index, row in metadata_df.iterrows():
    subject_id = row['Subject_ID']
    dicom_full_path = row['Path']
    convert_and_save_metadata(subject_id, dicom_full_path, nifti_base_path, metadata_df)

"""## Change the set-up for Baseline approach experiment.

For the first experiment the JSON file were not conducted from the Excel file, but rather from the folder names


"""

import os
import glob
import dicom2nifti
import gzip
import shutil
import json

dicom_base_path = '/content/drive/MyDrive/MASTER THESIS/CODE & MODELLING/DATABASE/!THESIS! - EXP. 1 (.dcm)'
nifti_base_path = '/content/drive/MyDrive/MASTER THESIS/CODE & MODELLING/DATABASE/!THESIS! - EXP. 1 (.nii)'

def convert_dicom_to_nifti(dicom_base_path, nifti_base_path):
    if not os.path.exists(dicom_base_path):
        print(f"The provided DICOM base path does not exist: {dicom_base_path}")
        return
    else:
        print(f"Starting conversion process in base path: {dicom_base_path}")

    for class_label in os.listdir(dicom_base_path):
        class_path = os.path.join(dicom_base_path, class_label)
        if os.path.isdir(class_path):
            print(f"Processing class '{class_label}'")
            process_subjects(class_path, class_label, nifti_base_path)
        else:
            print(f"Found a file instead of a directory at class level: {class_label}")

def process_subjects(class_path, class_label, nifti_base_path):
    for subject_id in os.listdir(class_path):
        subject_path = os.path.join(class_path, subject_id)
        if os.path.isdir(subject_path):
            print(f"Processing subject '{subject_id}' under class '{class_label}'")
            subject_nifti_path = os.path.join(nifti_base_path, class_label, subject_id)
            os.makedirs(subject_nifti_path, exist_ok=True)
            dicom_files_path = find_deepest_folder(subject_path)
            if dicom_files_path:
                convert_and_save_metadata(subject_id, dicom_files_path, subject_nifti_path)
            else:
                print(f"No DICOM files found in any subdirectories of {subject_path}")
        else:
            print(f"Found a file instead of a directory at subject level: {subject_id}")

def find_deepest_folder(directory):
    subdirectories = [os.path.join(directory, d) for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
    if not subdirectories:
        return directory
    else:
        for subdir in subdirectories:
            deepest = find_deepest_folder(subdir)
            if deepest:
                return deepest

def convert_and_save_metadata(subject_id, dicom_full_path, nifti_base_path):
    patient_nifti_path = os.path.join(nifti_base_path, subject_id)
    os.makedirs(patient_nifti_path, exist_ok=True)

    if os.path.isdir(dicom_full_path):
        dicom2nifti.convert_directory(dicom_full_path, patient_nifti_path)
        print(f"Conversion done for {subject_id}. Checking for NIfTI.gz files.")

        nifti_gz_files = glob.glob(os.path.join(patient_nifti_path, '*.nii.gz'))
        if nifti_gz_files:
            for nifti_gz_file in nifti_gz_files:
                nifti_gz_file_path = os.path.join(patient_nifti_path, nifti_gz_file)
                nifti_file_path = os.path.join(patient_nifti_path, subject_id + '.nii')

                with gzip.open(nifti_gz_file_path, 'rb') as f_in, open(nifti_file_path, 'wb') as f_out:
                    shutil.copyfileobj(f_in, f_out)
                os.remove(nifti_gz_file_path)
                print(f"NIfTI file for {subject_id} decompressed to {nifti_file_path}")
        else:
            print(f"No NIfTI.gz files found for {subject_id} in {patient_nifti_path}")
    else:
        print(f"Dicom directory does not exist for {subject_id}")


convert_dicom_to_nifti(dicom_base_path, nifti_base_path)

"""# Check DICOM files to see if anyone is corrupted

Is there some errors in the DICOM file
"""

import pydicom
import os

dicom_dir = '/content/drive/MyDrive/MASTER THESIS/Code and modelling/Database/DICOM/MRI/REMAINING AD SUBJ./305_S_6850'
for root, dirs, files in os.walk(dicom_dir):
    for file in files:
        if file.endswith('.dcm'):
            try:
                dicom_path = os.path.join(root, file)
                _ = pydicom.dcmread(dicom_path)
                print(f"Successfully read: {dicom_path}")
            except Exception as e:
                print(f"Failed to read: {dicom_path}. Error: {e}")

